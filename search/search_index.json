{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"In\u00edcio","text":""},{"location":"#handout-sqlalchemy-com-clean-architecture","title":"Handout SQLAlchemy com Clean Architecture","text":"Informa\u00e7\u00f5es do Curso <p>Vers\u00e3o: 2025.1 Dura\u00e7\u00e3o: 4-6 horas N\u00edvel: Intermedi\u00e1rio</p>"},{"location":"#sobre-este-handout","title":"Sobre este Handout","text":"<p>Este material foi desenvolvido para ensinar SQLAlchemy aplicando princ\u00edpios de Clean Architecture de forma pr\u00e1tica e did\u00e1tica. O handout combina teoria e pr\u00e1tica, guiando voc\u00ea na constru\u00e7\u00e3o de um projeto completo do zero.</p>"},{"location":"#objetivos-de-aprendizagem","title":"Objetivos de Aprendizagem","text":"<p>Ao completar este handout, voc\u00ea ser\u00e1 capaz de:</p> <ul> <li> Configurar um projeto Python com SQLAlchemy</li> <li> Aplicar princ\u00edpios de Clean Architecture</li> <li> Implementar o padr\u00e3o Repository</li> <li> Gerenciar relacionamentos entre entidades</li> <li> Usar migra\u00e7\u00f5es com Alembic</li> <li> Preparar a base para APIs REST</li> </ul>"},{"location":"#preparo-inicial","title":"Preparo Inicial","text":"<p>Pr\u00e9-requisitos</p> <ul> <li>Python 3.8+</li> <li>Conhecimento b\u00e1sico de POO</li> <li>Git (opcional, mas recomendado)</li> </ul>"},{"location":"#estrutura-do-projeto-final","title":"Estrutura do Projeto Final","text":"<pre><code>graph TD\n    A[SQLAlchemy Lesson] --&gt; B[app/]\n    B --&gt; C[database/]\n    B --&gt; D[entities/]\n    B --&gt; E[models/]\n    B --&gt; F[repositories/]\n    A --&gt; G[examples/]\n    A --&gt; H[alembic/]\n\n    C --&gt; C1[database.py]\n    D --&gt; D1[author.py]\n    D --&gt; D2[book.py]\n    E --&gt; E1[author_model.py]\n    E --&gt; E2[book_model.py]\n    F --&gt; F1[base_repository.py]\n    F --&gt; F2[author_repository.py]\n    F --&gt; F3[book_repository.py]\n\n    classDef database fill:#e1f5fe\n    classDef entities fill:#f3e5f5\n    classDef models fill:#e8f5e8\n    classDef repositories fill:#fff3e0\n\n    class C,C1 database\n    class D,D1,D2 entities\n    class E,E1,E2 models\n    class F,F1,F2,F3 repositories</code></pre>"},{"location":"#conteudo-presente-no-handout","title":"Conte\u00fado Presente no Handout","text":""},{"location":"#parte-1-fundamentos","title":"Parte 1: Fundamentos","text":"<ul> <li>Configura\u00e7\u00e3o inicial do projeto</li> <li>Ambiente virtual e depend\u00eancias</li> <li>Estrutura de pastas</li> </ul>"},{"location":"#parte-2-base-de-dados","title":"Parte 2: Base de Dados","text":"<ul> <li>Configura\u00e7\u00e3o SQLAlchemy</li> <li>Vari\u00e1veis de ambiente</li> <li>Conex\u00e3o com banco</li> </ul>"},{"location":"#parte-3-entidades-de-dominio","title":"Parte 3: Entidades de Dom\u00ednio","text":"<ul> <li>Pydantic para valida\u00e7\u00e3o</li> <li>Conceitos de Clean Architecture</li> <li>Separa\u00e7\u00e3o de responsabilidades</li> </ul>"},{"location":"#parte-4-modelos-orm","title":"Parte 4: Modelos ORM","text":"<ul> <li>Mapeamento objeto-relacional</li> <li>Relacionamentos many-to-many</li> <li>Configura\u00e7\u00e3o de tabelas</li> </ul>"},{"location":"#parte-5-padrao-repository","title":"Parte 5: Padr\u00e3o Repository","text":"<ul> <li>Abstra\u00e7\u00e3o de acesso a dados</li> <li>Repository base gen\u00e9rico</li> <li>Repositories espec\u00edficos</li> </ul>"},{"location":"#parte-6-migracoes","title":"Parte 6: Migra\u00e7\u00f5es","text":"<ul> <li>Configura\u00e7\u00e3o do Alembic</li> <li>Versionamento de schema</li> <li>Gest\u00e3o de mudan\u00e7as</li> </ul>"},{"location":"#parte-7-exemplos-praticos","title":"Parte 7: Exemplos Pr\u00e1ticos","text":"<ul> <li>CRUD completo</li> <li>Relacionamentos complexos</li> <li>Buscas avan\u00e7adas</li> </ul>"},{"location":"#parte-8-clean-architecture","title":"Parte 8: Clean Architecture","text":"<ul> <li>Princ\u00edpios SOLID aplicados</li> <li>Separa\u00e7\u00e3o de camadas</li> <li>Benef\u00edcios da arquitetura</li> </ul>"},{"location":"#tecnologias-utilizadas","title":"Tecnologias Utilizadas","text":"CoreValida\u00e7\u00e3oMigra\u00e7\u00f5es <pre><code>SQLAlchemy==2.0.30      # ORM principal\npsycopg2-binary==2.9.9  # Driver PostgreSQL\npython-dotenv==1.0.1    # Vari\u00e1veis de ambiente\n</code></pre> <pre><code>pydantic[email]==2.7.1  # Valida\u00e7\u00e3o e serializa\u00e7\u00e3o\n</code></pre> <pre><code>alembic==1.13.1         # Controle de migra\u00e7\u00f5es\n</code></pre>"},{"location":"#praticas","title":"Pr\u00e1ticas","text":"<p>O handout inclui exerc\u00edcios progressivos:</p> <p>Exerc\u00edcio 1: Entidade Book</p> <p>Implementar a entidade Book com valida\u00e7\u00f5es Pydantic</p> <p>Exerc\u00edcio 2: Modelo BookModel</p> <p>Criar o modelo SQLAlchemy para a tabela books</p> <p>Exerc\u00edcio 3: BookRepository</p> <p>Implementar repository com m\u00e9todos espec\u00edficos</p> <p>Exerc\u00edcio 4: Exemplo Avan\u00e7ado</p> <p>Criar exemplo completo com relacionamentos</p> <p>Desafio Final: Sistema de Empr\u00e9stimos</p> <p>Implementar funcionalidade completa do zero</p>"},{"location":"#fluxo-de-desenvolvimento","title":"Fluxo de Desenvolvimento","text":"<pre><code>flowchart LR\n    A[Entidades] --&gt; B[Modelos]\n    B --&gt; C[Migra\u00e7\u00f5es]\n    C --&gt; D[Repositories]\n    D --&gt; E[Exemplos]\n    E --&gt; F[Testes]\n    F --&gt; G[API Future]\n\n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style G fill:#bbf,stroke:#333,stroke-width:2px</code></pre>"},{"location":"#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Este handout prepara voc\u00ea para:</p> <ul> <li>FastAPI Integration: Criar APIs REST robustas</li> <li>Testing: Implementar testes unit\u00e1rios e de integra\u00e7\u00e3o  </li> <li>Advanced Patterns: Service Layer, DTOs, Dependency Injection</li> <li>Production: Deploy, monitoramento, performance</li> </ul>"},{"location":"#recursos-adicionais","title":"Recursos Adicionais","text":""},{"location":"#documentacao-oficial","title":"Documenta\u00e7\u00e3o Oficial","text":"<ul> <li>SQLAlchemy 2.0</li> <li>Pydantic V2</li> <li>Alembic</li> </ul>"},{"location":"#leitura-complementar","title":"Leitura Complementar","text":"<ul> <li>Clean Architecture (Robert C. Martin)</li> <li>Effective Python (Brett Slatkin)  </li> <li>Architecture Patterns with Python</li> </ul> <p>Pronto para come\u00e7ar?</p> <p>V\u00e1 para o Handout Principal e comece sua jornada com SQLAlchemy!</p>"},{"location":"handout/main/","title":"Handout SQLAlchemy","text":""},{"location":"handout/main/#handout-sqlalchemy-com-arquitetura-limpa","title":"Handout: SQLAlchemy com Arquitetura Limpa","text":"Informa\u00e7\u00f5es <p>Objetivo: Aprender SQLAlchemy aplicando princ\u00edpios de Clean Architecture, elaborando a estrutura base de uma API  Pr\u00e9-requisitos: Python b\u00e1sico, alguns conceitos de POO (Programa\u00e7\u00e3o Orientada \u00e0 Objetos) e SQL</p>"},{"location":"handout/main/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Neste handout, voc\u00ea aprender\u00e1 a criar um projeto Python utilizando SQLAlchemy como ORM (Object-Relational Mapper) seguindo os princ\u00edpios da Arquitetura Limpa (Clean Architecture). Ao final, voc\u00ea ter\u00e1 criado um sistema de biblioteca que gerencia autores e livros, preparando o terreno para futuramente criar uma API REST.</p>"},{"location":"handout/main/#o-que-e-sqlalchemy","title":"O que \u00e9 SQLAlchemy?","text":"<p>SQLAlchemy \u00e9 um toolkit SQL e ORM para Python que permite:</p> <ul> <li>Mapear classes Python para tabelas de banco de dados</li> <li>Executar consultas SQL de forma mais pyth\u00f4nica</li> <li>Gerenciar relacionamentos entre entidades</li> <li>Abstrair detalhes espec\u00edficos do banco de dados</li> </ul>"},{"location":"handout/main/#o-que-e-clean-architecture","title":"O que \u00e9 Clean Architecture?","text":"<p>A Arquitetura Limpa \u00e9 um padr\u00e3o arquitetural que visa separar as preocupa\u00e7\u00f5es do software em camadas bem definidas, tornando o c\u00f3digo:</p> <ul> <li>Test\u00e1vel: Cada camada pode ser testada independentemente</li> <li>Flex\u00edvel: Mudan\u00e7as em uma camada n\u00e3o afetam as outras</li> <li>Independente: A l\u00f3gica de neg\u00f3cio n\u00e3o depende de frameworks ou bancos espec\u00edficos</li> </ul>"},{"location":"handout/main/#estrutura-do-projeto","title":"Estrutura do Projeto","text":"<p>Vamos criar um projeto com a seguinte estrutura:</p> <pre><code>sqlalchemy-lesson/\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 database/          # Configura\u00e7\u00e3o do banco de dados\n\u2502   \u251c\u2500\u2500 entities/          # Entidades de dom\u00ednio (Pydantic)\n\u2502   \u251c\u2500\u2500 models/            # Modelos SQLAlchemy (ORM)\n\u2502   \u2514\u2500\u2500 repositories/      # Padr\u00e3o Repository\n\u251c\u2500\u2500 alembic/              # Migra\u00e7\u00f5es de banco\n\u251c\u2500\u2500 .env                  # Vari\u00e1veis de ambiente\n\u251c\u2500\u2500 requirements.txt      # Depend\u00eancias\n\u2514\u2500\u2500 alembic.ini          # Configura\u00e7\u00e3o do Alembic\n</code></pre>"},{"location":"handout/main/#explicacao-das-camadas","title":"Explica\u00e7\u00e3o das Camadas","text":""},{"location":"handout/main/#database","title":"\ud83d\uddc4\ufe0f Database","text":"<p>Cont\u00e9m a configura\u00e7\u00e3o da conex\u00e3o com o banco de dados, engine e sess\u00f5es.</p>"},{"location":"handout/main/#entities-entidades","title":"\ud83c\udfd7\ufe0f Entities (Entidades)","text":"<p>Classes Python que representam os conceitos do dom\u00ednio de neg\u00f3cio, independentes de qualquer tecnologia de persist\u00eancia.</p>"},{"location":"handout/main/#models","title":"\ud83d\udcca Models","text":"<p>Classes SQLAlchemy que mapeiam as entidades para tabelas do banco de dados.</p>"},{"location":"handout/main/#repositories","title":"\ud83d\udd04 Repositories","text":"<p>Implementam o padr\u00e3o Repository, abstraindo o acesso aos dados e fornecendo uma interface limpa para opera\u00e7\u00f5es CRUD.</p>"},{"location":"handout/main/#parte-1-configuracao-inicial-do-projeto","title":"Parte 1: Configura\u00e7\u00e3o Inicial do Projeto","text":""},{"location":"handout/main/#11-criando-o-repositorio","title":"1.1 Criando o Reposit\u00f3rio","text":"<p>Primeiro, vamos criar o reposit\u00f3rio e a estrutura b\u00e1sica:</p> <pre><code>mkdir sqlalchemy-lesson\ncd sqlalchemy-lesson\n</code></pre>"},{"location":"handout/main/#12-ambiente-virtual-e-dependencias","title":"1.2 Ambiente Virtual e Depend\u00eancias","text":"<pre><code># Criar ambiente virtual\npython -m venv venv\n\n# Ativar ambiente virtual (Windows)\nvenv\\Scripts\\activate\n\n# Ativar ambiente virtual (Linux/macOS)\nsource venv/bin/activate\n</code></pre> <p>Agora vamos criar o arquivo <code>requirements.txt</code>:</p> requirements.txt<pre><code>SQLAlchemy==2.0.30\npsycopg2-binary==2.9.9\npython-dotenv==1.0.1\npydantic[email]==2.7.1\nalembic==1.13.1\n</code></pre> <pre><code># Instalar depend\u00eancias\npip install -r requirements.txt\n</code></pre>"},{"location":"handout/main/#13-estrutura-de-pastas","title":"1.3 Estrutura de Pastas","text":"<p>Crie a estrutura de pastas do projeto:</p> <pre><code># PowerShell/CMD\nmkdir app\\database, app\\entities, app\\models, app\\repositories, examples, alembic\n</code></pre> <p>ou</p> <pre><code># Linux/macOS\nmkdir -p app/database app/entities app/models app/repositories examples alembic\n</code></pre> <p>Organiza\u00e7\u00e3o</p> <p>Uma boa organiza\u00e7\u00e3o de pastas \u00e9 fundamental para manter o projeto escal\u00e1vel e f\u00e1cil de manter.</p>"},{"location":"handout/main/#parte-2-configuracao-do-banco-de-dados","title":"Parte 2: Configura\u00e7\u00e3o do Banco de Dados","text":""},{"location":"handout/main/#21-variaveis-de-ambiente","title":"2.1 Vari\u00e1veis de Ambiente","text":"<p>Crie o arquivo <code>.env</code> na raiz do projeto:</p> .env<pre><code>DATABASE_URL=sqlite:///./biblioteca.db\n</code></pre> <p>Bancos Suportados</p> <p>Para PostgreSQL: <code>postgresql://user:password@localhost/dbname</code> Para MySQL: <code>mysql://user:password@localhost/dbname</code></p>"},{"location":"handout/main/#22-configuracao-da-database","title":"2.2 Configura\u00e7\u00e3o da Database","text":"<p>Crie o arquivo <code>app/database/database.py</code>:</p> app/database/database.py<pre><code>from sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker, declarative_base\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()\n\nDATABASE_URL = os.getenv(\"DATABASE_URL\", \"sqlite:///./biblioteca.db\")\n\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n</code></pre> <p>Explica\u00e7\u00e3o do c\u00f3digo:</p> <ul> <li><code>create_engine()</code>: Cria a conex\u00e3o com o banco</li> <li><code>sessionmaker()</code>: Factory para criar sess\u00f5es de banco</li> <li><code>declarative_base()</code>: Classe base para nossos modelos ORM</li> </ul>"},{"location":"handout/main/#23-arquivo-__init__py","title":"2.3 Arquivo <code>__init__.py</code>","text":"<p>Crie <code>app/database/__init__.py</code> vazio (podemos remov\u00ea-lo posteriormente se necess\u00e1rio).</p>"},{"location":"handout/main/#parte-3-entidades-de-dominio","title":"Parte 3: Entidades de Dom\u00ednio","text":""},{"location":"handout/main/#o-que-sao-entidades","title":"O que s\u00e3o Entidades?","text":"<p>As entidades representam os conceitos centrais do nosso dom\u00ednio de neg\u00f3cio - s\u00e3o as \"coisas\" importantes que nosso sistema gerencia. No caso de uma biblioteca, nossos conceitos principais s\u00e3o Autores e Livros.</p>"},{"location":"handout/main/#objetivo-das-entidades","title":"Objetivo das Entidades:","text":"<ul> <li>Representar os conceitos de neg\u00f3cio de forma pura</li> <li>Conter as regras de valida\u00e7\u00e3o dos dados</li> <li>Ser independentes de tecnologias (banco de dados, frameworks)</li> <li>Facilitar a comunica\u00e7\u00e3o entre diferentes camadas da aplica\u00e7\u00e3o</li> </ul>"},{"location":"handout/main/#por-que-pydantic","title":"Por que Pydantic?","text":"<p>Pydantic \u00e9 uma biblioteca Python para valida\u00e7\u00e3o de dados usando type hints. Escolhemos ela porque:</p> <ul> <li>Valida\u00e7\u00e3o autom\u00e1tica: Garante que os dados est\u00e3o corretos</li> <li>Serializa\u00e7\u00e3o JSON: Converte objetos Python \u2194 JSON facilmente</li> <li>Type hints nativos: Usa anota\u00e7\u00f5es de tipo do Python</li> <li>Integra\u00e7\u00e3o com APIs: Base perfeita para FastAPI</li> <li>Documenta\u00e7\u00e3o autom\u00e1tica: Gera documenta\u00e7\u00e3o dos campos</li> </ul>"},{"location":"handout/main/#31-entidade-author-primeira-versao","title":"3.1 Entidade Author (Primeira Vers\u00e3o)","text":"<p>Vamos come\u00e7ar com uma vers\u00e3o simplificada da entidade Author:</p> app/entities/author.py<pre><code>from pydantic import BaseModel, EmailStr, Field\nfrom typing import Optional\n\nclass Author(BaseModel):\n    \"\"\"\n    Entidade Author - Representa um autor de livros\n\n    Esta \u00e9 nossa representa\u00e7\u00e3o 'pura' de um autor,\n    independente de como ele \u00e9 armazenado no banco\n    \"\"\"\n    id: Optional[int] = None  # Opcional pois \u00e9 gerado pelo banco\n    name: str = Field(..., min_length=1, max_length=255)\n    email: EmailStr\n\n    class Config:\n        # Permite converter objetos SQLAlchemy para Pydantic\n        from_attributes = True\n\n    def __str__(self):\n        return f\"Author: {self.name} ({self.email})\"\n</code></pre> \ud83d\udcd6 Explica\u00e7\u00e3o linha por linha:"},{"location":"handout/main/#explicacao-detalhada-do-codigo-author","title":"Explica\u00e7\u00e3o Detalhada do C\u00f3digo Author","text":"<pre><code># Importa\u00e7\u00f5es necess\u00e1rias\nfrom pydantic import BaseModel, EmailStr, Field\nfrom typing import Optional\n\nclass Author(BaseModel):\n    id: Optional[int] = None\n    name: str = Field(..., min_length=1, max_length=255)\n    email: EmailStr\n    class Config:\n        from_attributes = True\n    def __str__(self):\n        return f\"Author: {self.name} ({self.email})\"\n</code></pre> <ul> <li> <p>Importa\u00e7\u00f5es:</p> <ul> <li><code>BaseModel</code>: Classe base do Pydantic, traz valida\u00e7\u00e3o autom\u00e1tica e serializa\u00e7\u00e3o.</li> <li><code>EmailStr</code>: Tipo especial para validar e garantir formato de email.</li> <li><code>Field</code>: Permite definir regras extras para os campos (obrigatoriedade, tamanho, etc).</li> <li><code>Optional</code>: Indica que o campo pode ser <code>None</code> (opcional).</li> </ul> </li> <li> <p>Classe Author(BaseModel):</p> <ul> <li>Herda de <code>BaseModel</code>, tornando a classe uma entidade Pydantic.</li> </ul> </li> <li> <p>Atributos:</p> <ul> <li><code>id: Optional[int] = None</code>: Identificador do autor, opcional pois geralmente \u00e9 gerado pelo banco.</li> <li><code>name: str = Field(..., min_length=1, max_length=255)</code>: Nome obrigat\u00f3rio, entre 1 e 255 caracteres.</li> <li><code>email: EmailStr</code>: Email obrigat\u00f3rio, validado automaticamente.</li> </ul> </li> <li> <p>Config interna:</p> <ul> <li><code>from_attributes = True</code>: Permite converter objetos SQLAlchemy para Pydantic facilmente.</li> </ul> </li> <li> <p>M\u00e9todo especial:</p> <ul> <li><code>__str__</code>: Facilita o print e debug, mostrando nome e email do autor.</li> </ul> </li> </ul> <p>Resumo: Essa estrutura garante que todo autor criado seja v\u00e1lido, com nome preenchido e email correto, al\u00e9m de facilitar integra\u00e7\u00e3o com banco e APIs.</p>"},{"location":"handout/main/#facilitando-a-pratica-entidade-book","title":"Facilitando a Pr\u00e1tica: Entidade Book","text":"<p>Para criar a entidade Book, siga o mesmo padr\u00e3o do Author. Veja o passo a passo:</p> <ol> <li>Crie o arquivo <code>app/entities/book.py</code></li> <li>Implemente o c\u00f3digo:</li> </ol> <pre><code>from pydantic import BaseModel, Field\nfrom typing import Optional\n\nclass Book(BaseModel):\n    id: Optional[int] = None  # Opcional, gerado pelo banco\n    title: str = Field(..., min_length=1, max_length=500)  # T\u00edtulo obrigat\u00f3rio\n    isbn: Optional[str] = Field(None, min_length=10, max_length=17)  # ISBN opcional\n\n    class Config:\n        from_attributes = True\n\n    def __str__(self):\n        return f\"Book: {self.title}\"\n</code></pre> <p>Dicas para a pr\u00e1tica: - Siga o padr\u00e3o de valida\u00e7\u00e3o do Author - Use <code>Field</code> para definir limites de tamanho - O campo <code>isbn</code> pode ser omitido ao criar um livro - O m\u00e9todo <code>__str__</code> facilita prints e testes</p> <p>Teste r\u00e1pido: </p><pre><code>book = Book(title=\"Dom Casmurro\", isbn=\"978-8525406958\")\nprint(book)\n</code></pre><p></p>"},{"location":"handout/main/#32-testando-a-entidade-author","title":"3.2 Testando a Entidade Author","text":"<p>Vamos criar um exemplo simples para entender como funciona. Crie o seguinte arquivo na pasta /app do seu projeto e execute-o:</p> app/author_example.py<pre><code>from entities.author import Author\n\n# Criando um autor v\u00e1lido\nauthor = Author(\n    name=\"Machado de Assis\",\n    email=\"machado@email.com\"\n)\n\nprint(\"============= Autor V\u00e1lido =============\")\nprint(author)  # Author: Machado de Assis (machado@email.com)\nprint()\nprint(author.model_dump())  # {'id': None, 'name': 'Machado de Assis', 'email': 'machado@email.com'}\nprint()\n# Tentando criar autor inv\u00e1lido\ntry:\n    print(\"============= Tentando criar Autor Inv\u00e1lido =============\")\n    invalid_author = Author(\n        name=\"\",  # \u2190 Nome vazio! Vai dar erro\n        email=\"email-inv\u00e1lido\"  # \u2190 Email inv\u00e1lido! Vai dar erro\n    )\nexcept ValueError as e:\n    print(f\"Erro de valida\u00e7\u00e3o: {e}\")\n</code></pre>"},{"location":"handout/main/#33-pratica-1-entidade-book-simples","title":"3.3 Pr\u00e1tica 1: Entidade Book (Simples)","text":"<p>Agora \u00e9 sua vez! Crie a entidade <code>Book</code> no arquivo <code>app/entities/book.py</code>.</p> <p>Requisitos: - Campo <code>id</code> opcional - Campo <code>title</code> obrigat\u00f3rio (1-500 caracteres) - Campo <code>isbn</code> opcional (10-17 caracteres quando fornecido)</p> <p>Dica</p> <p>Por enquanto, n\u00e3o inclua a lista de autores. Vamos manter simples e adicionar relacionamentos depois!</p> Solu\u00e7\u00e3o app/entities/book.py<pre><code>from pydantic import BaseModel, Field\nfrom typing import Optional\n\nclass Book(BaseModel):\n    \"\"\"\n    Entidade Book - Representa um livro na biblioteca\n\n    Mantida simples por enquanto, sem relacionamentos\n    \"\"\"\n    id: Optional[int] = None\n    title: str = Field(..., min_length=1, max_length=500)\n    isbn: Optional[str] = Field(None, min_length=10, max_length=17)\n\n    class Config:\n        from_attributes = True\n\n    def __str__(self):\n        return f\"Book: {self.title}\"\n</code></pre>"},{"location":"handout/main/#34-versao-completa-com-relacionamentos","title":"3.4 Vers\u00e3o Completa com Relacionamentos","text":"<p>Ap\u00f3s entender o conceito b\u00e1sico, podemos criar vers\u00f5es mais complexas com relacionamentos:</p> Vers\u00e3o Avan\u00e7ada com Relacionamentos app/entities/author.py - Vers\u00e3o Completa<pre><code>from pydantic import BaseModel, EmailStr, Field\nfrom typing import List, Optional\n\nclass Author(BaseModel):\n    \"\"\"\n    Entidade Author - Vers\u00e3o completa com relacionamentos\n    \"\"\"\n    id: Optional[int] = None\n    name: str = Field(..., min_length=1, max_length=255)\n    email: EmailStr\n    books: List['Book'] = Field(default_factory=list)\n\n    class Config:\n        from_attributes = True\n\n    def __str__(self):\n        return f\"Author: {self.name} ({self.email})\"\n\n# Resolve forward references (necess\u00e1rio para relacionamentos)\nfrom .book import Book\nAuthor.model_rebuild()\n</code></pre> app/entities/book.py - Vers\u00e3o Completa<pre><code>from pydantic import BaseModel, Field\nfrom typing import List, Optional\n\nclass Book(BaseModel):\n    \"\"\"\n    Entidade Book - Vers\u00e3o completa com relacionamentos\n    \"\"\"\n    id: Optional[int] = None\n    title: str = Field(..., min_length=1, max_length=500)\n    isbn: Optional[str] = Field(None, min_length=10, max_length=17)\n    authors: List['Author'] = Field(default_factory=list)\n\n    class Config:\n        from_attributes = True\n\n    def __str__(self):\n        return f\"Book: {self.title}\"\n\n# Resolve forward references\nfrom .author import Author\nBook.model_rebuild()\n</code></pre>"},{"location":"handout/main/#35-conceitos-importantes","title":"3.5 Conceitos Importantes","text":""},{"location":"handout/main/#forward-references","title":"Forward References","text":"<pre><code>books: List['Book'] = Field(default_factory=list)\n#           \u2191 String quote porque Book ainda n\u00e3o foi definido\n</code></pre>"},{"location":"handout/main/#model_rebuild","title":"model_rebuild()","text":"<pre><code>Author.model_rebuild()\n# \u2191 Necess\u00e1rio para resolver as refer\u00eancias circulares\n</code></pre>"},{"location":"handout/main/#default_factory","title":"default_factory","text":"<pre><code>books: List['Book'] = Field(default_factory=list)\n#                           \u2191 Cria uma nova lista para cada inst\u00e2ncia\n</code></pre>"},{"location":"handout/main/#36-entidades-vs-models-qual-a-diferenca","title":"3.6 Entidades vs Models: Qual a Diferen\u00e7a?","text":"<p>\u00c9 comum haver confus\u00e3o entre Entidades e Models. Vamos esclarecer:</p> Aspecto Entidades (Pydantic) Models (SQLAlchemy) Prop\u00f3sito Regras de neg\u00f3cio Persist\u00eancia no banco Depend\u00eancia Independente de tecnologia Dependente do SQLAlchemy Foco Valida\u00e7\u00e3o e comportamento Mapeamento de tabelas Localiza\u00e7\u00e3o Camada de dom\u00ednio Camada de infraestrutura"},{"location":"handout/main/#fluxo-na-arquitetura-limpa","title":"Fluxo na Arquitetura Limpa:","text":"<pre><code>API Request \u2192 Entidade (valida\u00e7\u00e3o) \u2192 Model (persist\u00eancia) \u2192 Database\n               \u2191                      \u2191\n         Regras de neg\u00f3cio      Mapeamento ORM\n</code></pre>"},{"location":"handout/main/#37-testando-nossas-entidades","title":"3.7 Testando Nossas Entidades","text":"<p>Vamos criar um exemplo pr\u00e1tico para testar as entidades:</p> app/test_entities.py - Exemplo de teste<pre><code>from entities.author import Author\nfrom entities.book import Book\n\ndef test_entities():\n    # Testando valida\u00e7\u00f5es\n    print(\"=== Testando Entidades ===\")\n\n    # Autor v\u00e1lido\n    author = Author(\n        name=\"Clarice Lispector\",\n        email=\"clarice@email.com\"\n    )\n    print(f\"\u2705 Autor criado: {author}\")\n\n    # Livro v\u00e1lido\n    book = Book(\n        title=\"A Hora da Estrela\",\n        isbn=\"978-8520925829\"\n    )\n    print(f\"\u2705 Livro criado: {book}\")\n\n    # Testando valida\u00e7\u00f5es que devem falhar\n    try:\n        # Nome vazio\n        invalid_author = Author(name=\"\", email=\"test@email.com\")\n    except ValueError as e:\n        print(f\"\u274c Valida\u00e7\u00e3o funcionou - Nome vazio: {e}\")\n\n    try:\n        # Email inv\u00e1lido\n        invalid_author = Author(name=\"Test\", email=\"email-inv\u00e1lido\")\n    except ValueError as e:\n        print(f\"\u274c Valida\u00e7\u00e3o funcionou - Email inv\u00e1lido: {e}\")\n\n    try:\n        # ISBN muito curto\n        invalid_book = Book(title=\"Test\", isbn=\"123\")\n    except ValueError as e:\n        print(f\"\u274c Valida\u00e7\u00e3o funcionou - ISBN inv\u00e1lido: {e}\")\n\nif __name__ == \"__main__\":\n    test_entities()\n</code></pre> <p>Execute o Teste</p> <p>Crie esse arquivo na raiz do projeto e execute com <code>python test_entities.py</code> para ver as valida\u00e7\u00f5es funcionando!</p>"},{"location":"handout/main/#parte-4-modelos-sqlalchemy","title":"Parte 4: Modelos SQLAlchemy","text":""},{"location":"handout/main/#o-que-sao-models","title":"O que s\u00e3o Models?","text":"<p>Os models s\u00e3o as classes que representam as tabelas do banco de dados. Eles fazem o \"mapeamento objeto-relacional\" (ORM), ou seja, conectam o mundo Python ao mundo SQL.</p>"},{"location":"handout/main/#objetivo-dos-models","title":"Objetivo dos Models:","text":"<ul> <li>Definir como os dados ser\u00e3o armazenados no banco</li> <li>Mapear atributos Python para colunas SQL</li> <li>Gerenciar relacionamentos entre tabelas</li> <li>Permitir opera\u00e7\u00f5es CRUD usando objetos Python</li> </ul>"},{"location":"handout/main/#por-que-sqlalchemy","title":"Por que SQLAlchemy?","text":""},{"location":"handout/main/#sqlalchemy-e-a-principal-biblioteca-orm-do-python-ela-permite","title":"SQLAlchemy \u00e9 a principal biblioteca ORM do Python. Ela permite:","text":"<ul> <li>Criar tabelas e relacionamentos usando classes Python</li> <li>Executar queries SQL de forma pyth\u00f4nica</li> <li>Suporte a v\u00e1rios bancos (SQLite, PostgreSQL, MySQL...)</li> <li>Gerenciar migra\u00e7\u00f5es e versionamento do schema</li> </ul>"},{"location":"handout/main/#41-model-author-mapeando-a-tabela-de-autores","title":"4.1 Model Author: Mapeando a Tabela de Autores","text":"<p>Vamos criar o model que representa a tabela de autores. Ele ser\u00e1 respons\u00e1vel por: - Definir os campos da tabela - Gerenciar o relacionamento com livros</p> app/models/author_model.py<pre><code>from sqlalchemy import Column, Integer, String, Table, ForeignKey\nfrom sqlalchemy.orm import relationship\nfrom database.database import Base\n\n# Tabela de associa\u00e7\u00e3o para o relacionamento many-to-many\nauthor_book_association = Table(\n    'author_book_association',\n    Base.metadata,\n    Column('author_id', Integer, ForeignKey('authors.id'), primary_key=True),\n    Column('book_id', Integer, ForeignKey('books.id'), primary_key=True)\n)\n\nclass AuthorModel(Base):\n    __tablename__ = \"authors\"  # Nome da tabela no banco\n\n    id = Column(Integer, primary_key=True, index=True)  # Chave prim\u00e1ria\n    name = Column(String, index=True)                   # Nome do autor\n    email = Column(String, unique=True, index=True)     # Email \u00fanico\n\n    # Relacionamento many-to-many com livros\n    books = relationship(\n        \"BookModel\",                      # Classe relacionada\n        secondary=author_book_association, # Tabela de associa\u00e7\u00e3o\n        back_populates=\"authors\"          # Relacionamento reverso\n    )\n\n    def __repr__(self):\n        return f\"&lt;AuthorModel(id={self.id}, name='{self.name}', email='{self.email}')&gt;\"\n</code></pre>"},{"location":"handout/main/#explicacao-do-codigo","title":"Explica\u00e7\u00e3o do C\u00f3digo","text":"<ul> <li><code>Base</code>: Classe base do SQLAlchemy para todos os models</li> <li><code>__tablename__</code>: Nome da tabela no banco</li> <li><code>Column</code>: Define cada coluna da tabela</li> <li><code>relationship</code>: Cria o relacionamento entre tabelas</li> <li><code>author_book_association</code>: Tabela extra para o relacionamento many-to-many</li> </ul> <p>Fluxo do relacionamento: Autor pode ter v\u00e1rios livros, e livro pode ter v\u00e1rios autores. O SQLAlchemy gerencia isso usando uma tabela de associa\u00e7\u00e3o.</p> Equival\u00eancia em SQL <p>Esse c\u00f3digo \u00e9 equivalente \u00e0 seguinte query em SQL:</p> <pre><code>CREATE TABLE authors (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR UNIQUE\n);\n\nCREATE TABLE author_book_association (\n    author_id INTEGER,\n    book_id INTEGER,\n    PRIMARY KEY (author_id, book_id),\n    FOREIGN KEY (author_id) REFERENCES authors(id),\n    FOREIGN KEY (book_id) REFERENCES books(id)\n);\n</code></pre>"},{"location":"handout/main/#42-pratica-2-model-book","title":"4.2 Pr\u00e1tica 2: Model Book","text":"<p>Agora crie o model que representa a tabela de livros. Ele deve:</p> <ul> <li>Herdar de <code>Base</code></li> <li>Definir os campos <code>id</code>, <code>title</code>, <code>isbn</code></li> <li>Gerenciar o relacionamento com autores</li> </ul> Dica: Relacionamento reverso <p>A tabela de associa\u00e7\u00e3o j\u00e1 foi definida no c\u00f3digo do autor, portanto, n\u00e3o \u00e9 necess\u00e1rio cri\u00e1-la novamente. Apenas use o mesmo nome da tabela de associa\u00e7\u00e3o e o par\u00e2metro <code>back_populates</code> para conectar os dois lados. Como em: </p><pre><code>authors = relationship(\n    \"AuthorModel\",\n    secondary=\"author_book_association\",\n    back_populates=\"books\"\n)\n</code></pre><p></p> Solu\u00e7\u00e3o app/models/book_model.py<pre><code>from sqlalchemy import Column, Integer, String\nfrom sqlalchemy.orm import relationship\nfrom database.database import Base\n\nclass BookModel(Base):\n    __tablename__ = \"books\"  # Nome da tabela\n\n    id = Column(Integer, primary_key=True, index=True)  # Chave prim\u00e1ria\n    title = Column(String, index=True)                  # T\u00edtulo do livro\n    isbn = Column(String, unique=True, index=True)      # ISBN \u00fanico\n\n    # Relacionamento many-to-many com autores\n    authors = relationship(\n        \"AuthorModel\",\n        secondary=\"author_book_association\",\n        back_populates=\"books\"\n    )\n\n    def __repr__(self):\n        return f\"&lt;BookModel(id={self.id}, title='{self.title}', isbn='{self.isbn}')&gt;\"\n</code></pre>"},{"location":"handout/main/#explicacao-do-codigo_1","title":"Explica\u00e7\u00e3o do C\u00f3digo","text":"<ul> <li><code>__tablename__</code>: Nome da tabela no banco</li> <li><code>id</code>, <code>title</code>, <code>isbn</code>: Colunas principais</li> <li><code>authors</code>: Relacionamento com autores</li> <li><code>secondary</code>: Nome da tabela de associa\u00e7\u00e3o</li> <li><code>back_populates</code>: Conecta o relacionamento reverso</li> </ul>"},{"location":"handout/main/#43-inicializacao-dos-models","title":"4.3 Inicializa\u00e7\u00e3o dos Models","text":"<p>Para facilitar os imports e garantir que todos os models estejam registrados, crie o arquivo de inicializa\u00e7\u00e3o:</p> app/models/__init__.py<pre><code>from .author_model import AuthorModel, author_book_association\nfrom .book_model import BookModel\n\n__all__ = [\"AuthorModel\", \"BookModel\", \"author_book_association\"]\n</code></pre>"},{"location":"handout/main/#44-resumo-visual","title":"4.4 Resumo Visual","text":"<pre><code>erDiagram\n    AUTHORS ||--o{ AUTHOR_BOOK_ASSOCIATION : wrote\n    BOOKS ||--o{ AUTHOR_BOOK_ASSOCIATION : written_by\n    AUTHORS {\n        int id\n        string name\n        string email\n    }\n    BOOKS {\n        int id\n        string title\n        string isbn\n    }\n    AUTHOR_BOOK_ASSOCIATION {\n        int author_id\n        int book_id\n    }</code></pre>"},{"location":"handout/main/#45-dicas-e-armadilhas-comuns","title":"4.5 Dicas e Armadilhas Comuns","text":"<ul> <li>Sempre use <code>back_populates</code> nos dois lados do relacionamento</li> <li>O nome da tabela de associa\u00e7\u00e3o deve ser igual nos dois models</li> <li>O SQLAlchemy n\u00e3o valida tipos automaticamente: use Pydantic nas entidades para isso</li> <li>O m\u00e9todo <code>__repr__</code> ajuda no debug e nos prints</li> </ul>"},{"location":"handout/main/#parte-5-padrao-repository","title":"Parte 5: Padr\u00e3o Repository","text":"<p>O padr\u00e3o Repository abstrai o acesso aos dados, fornecendo uma interface limpa para opera\u00e7\u00f5es CRUD.</p>"},{"location":"handout/main/#51-base-repository","title":"5.1 Base Repository","text":"<p>Primeiro, vamos criar um reposit\u00f3rio base com opera\u00e7\u00f5es comuns:</p> app/repositories/base_repository.py<pre><code>from sqlalchemy.orm import Session\nfrom typing import TypeVar, Type, Generic\n\nT = TypeVar('T')\n\nclass BaseRepository(Generic[T]):\n    def __init__(self, session: Session, model: Type[T]):\n        self.session = session\n        self.model = model\n\n    def get_all(self) -&gt; list[T]:\n        return self.session.query(self.model).all()\n\n    def get_by_id(self, id: int) -&gt; T | None:\n        return self.session.query(self.model).filter(self.model.id == id).first()\n\n    def add(self, entity: T) -&gt; T:\n        self.session.add(entity)\n        self.session.commit()\n        self.session.refresh(entity)\n        return entity\n\n    def update(self, entity: T) -&gt; T:\n        self.session.merge(entity)\n        self.session.commit()\n        self.session.refresh(entity)\n        return entity\n\n    def delete(self, id: int):\n        entity = self.get_by_id(id)\n        if entity:\n            self.session.delete(entity)\n            self.session.commit()\n</code></pre> <p>Generics em Python</p> <p>Usamos <code>Generic[T]</code> para criar um reposit\u00f3rio reutiliz\u00e1vel para qualquer tipo de modelo. O c\u00f3digo acima, por exemplo, pode ser usado tanto para <code>AuthorModel</code> quanto para <code>BookModel</code>, quanto para qualquer outro Modelo criado ao longo do projeto.</p> Equival\u00eancia em SQL <p>O m\u00e9todo <code>get_all()</code> \u00e9  equivalente a: </p><pre><code>SELECT * FROM table_name;\n</code></pre><p></p> <p>O m\u00e9todo <code>get_by_id(id)</code> \u00e9 equivalente a: </p><pre><code>SELECT * FROM table_name WHERE id = :id LIMIT 1;\n</code></pre><p></p> <p>O m\u00e9todo <code>add(entity)</code> \u00e9 equivalente a: </p><pre><code>INSERT INTO table_name (columns...) VALUES (values...);\n</code></pre><p></p> <p>O m\u00e9todo <code>update(entity)</code> \u00e9 equivalente a: </p><pre><code>UPDATE table_name SET column1 = value1, ... WHERE id = :id;\n</code></pre><p></p> <p>O m\u00e9todo <code>delete(id)</code> \u00e9 equivalente a: </p><pre><code>DELETE FROM table_name WHERE id = :id;\n</code></pre><p></p>"},{"location":"handout/main/#52-repository-do-author","title":"5.2 Repository do Author","text":"<p>Crie <code>app/repositories/author_repository.py</code>:</p> app/repositories/author_repository.py<pre><code>from sqlalchemy.orm import Session\nfrom models.author_model import AuthorModel\nfrom repositories.base_repository import BaseRepository\n\nclass AuthorRepository(BaseRepository[AuthorModel]):\n    def __init__(self, session: Session):\n        super().__init__(session, AuthorModel)\n\n    def get_by_email(self, email: str) -&gt; AuthorModel | None:\n        \"\"\"Busca um autor pelo email\"\"\"\n        return self.session.query(AuthorModel).filter(AuthorModel.email == email).first()\n\n    def get_by_name(self, name: str) -&gt; list[AuthorModel]:\n        \"\"\"Busca autores pelo nome (busca parcial)\"\"\"\n        return self.session.query(AuthorModel).filter(AuthorModel.name.ilike(f\"%{name}%\")).all()\n\n    def get_authors_with_books(self) -&gt; list[AuthorModel]:\n        \"\"\"Retorna autores que t\u00eam livros\"\"\"\n        return self.session.query(AuthorModel).join(AuthorModel.books).distinct().all()\n</code></pre> Equival\u00eancia em SQL <p>O m\u00e9todo <code>get_by_email(email)</code> \u00e9 equivalente a: </p><pre><code>SELECT * FROM authors WHERE email = :email LIMIT 1;\n</code></pre><p></p> <p>O m\u00e9todo <code>get_by_name(name)</code> \u00e9 equivalente a: </p><pre><code>SELECT * FROM authors WHERE name ILIKE '%' || :name || '%';\n</code></pre><p></p> <p>O m\u00e9todo <code>get_authors_with_books()</code> \u00e9 equivalente a: </p><pre><code>SELECT DISTINCT a.* FROM authors a\nJOIN author_book_association aba ON a.id = aba.author_id\nJOIN books b ON aba.book_id = b.id;\n</code></pre><p></p>"},{"location":"handout/main/#53-pratica-3-repository-do-book","title":"5.3 Pr\u00e1tica 3: Repository do Book","text":"<p>Crie o <code>BookRepository</code> no arquivo <code>app/repositories/book_repository.py</code>.</p>"},{"location":"handout/main/#metodos-adicionais-necessarios","title":"M\u00e9todos adicionais necess\u00e1rios:","text":"<ul> <li><code>get_by_title(title: str)</code>: Busca por t\u00edtulo (parcial)</li> <li><code>get_by_isbn(isbn: str)</code>: Busca por ISBN exato</li> <li><code>get_books_with_authors()</code>: Livros com autores carregados</li> </ul> Solu\u00e7\u00e3o app/repositories/book_repository.py<pre><code>from sqlalchemy.orm import Session\nfrom models.book_model import BookModel\nfrom repositories.base_repository import BaseRepository\n\nclass BookRepository(BaseRepository[BookModel]):\n    def __init__(self, session: Session):\n        super().__init__(session, BookModel)\n\n    def get_by_title(self, title: str) -&gt; list[BookModel]:\n        \"\"\"Busca livros pelo t\u00edtulo (busca parcial)\"\"\"\n        return self.session.query(BookModel).filter(BookModel.title.ilike(f\"%{title}%\")).all()\n\n    def get_by_isbn(self, isbn: str) -&gt; BookModel | None:\n        \"\"\"Busca livro pelo ISBN\"\"\"\n        return self.session.query(BookModel).filter(BookModel.isbn == isbn).first()\n\n    def get_books_with_authors(self) -&gt; list[BookModel]:\n        \"\"\"Retorna livros com informa\u00e7\u00f5es dos autores carregadas\"\"\"\n        return self.session.query(BookModel).join(BookModel.authors).all()\n</code></pre> Equival\u00eancia em SQL <p>O m\u00e9todo <code>get_by_title(title)</code> \u00e9 equivalente a: </p><pre><code>SELECT * FROM books WHERE title ILIKE '%' || :title || '%';\n</code></pre><p></p> <p>O m\u00e9todo <code>get_by_isbn(isbn)</code> \u00e9 equivalente a: </p><pre><code>SELECT * FROM books WHERE isbn = :isbn LIMIT 1;\n</code></pre><p></p> <p>O m\u00e9todo <code>get_books_with_authors()</code> \u00e9 equivalente a: </p><pre><code>SELECT b.* FROM books b\nJOIN author_book_association aba ON b.id = aba.book_id\nJOIN authors a ON aba.author_id = a.id;\n</code></pre><p></p>"},{"location":"handout/main/#parte-6-migracoes-com-alembic","title":"Parte 6: Migra\u00e7\u00f5es com Alembic","text":""},{"location":"handout/main/#o-que-sao-migracoes-de-banco-de-dados","title":"O que s\u00e3o Migra\u00e7\u00f5es de Banco de Dados?","text":"<p>Migra\u00e7\u00e3o \u00e9 o processo de alterar a estrutura do banco de dados de forma controlada e segura. Sempre que voc\u00ea precisa criar, modificar ou remover tabelas e colunas, \u00e9 necess\u00e1rio aplicar uma migra\u00e7\u00e3o.</p> <p>Por que migra\u00e7\u00f5es s\u00e3o importantes? - Permitem evoluir o banco sem perder dados - Garantem que todos os ambientes (dev, prod, CI) fiquem sincronizados - Facilitam o trabalho em equipe: todos aplicam as mesmas mudan\u00e7as - Evitam erros manuais e retrabalho</p>"},{"location":"handout/main/#alembic-o-gerenciador-de-migracoes-do-sqlalchemy","title":"Alembic: O Gerenciador de Migra\u00e7\u00f5es do SQLAlchemy","text":"<p>O Alembic \u00e9 a ferramenta oficial de migra\u00e7\u00e3o para projetos SQLAlchemy. Ele automatiza o processo de: - Criar scripts de migra\u00e7\u00e3o (Python + SQL) - Versionar o schema do banco - Aplicar e desfazer mudan\u00e7as (upgrade/downgrade) - Gerenciar hist\u00f3rico de altera\u00e7\u00f5es</p> <p>Vantagens de usar Alembic: - N\u00e3o precisa escrever SQL \"na m\u00e3o\" para cada altera\u00e7\u00e3o - Permite gerar scripts automaticamente a partir dos models - Ajuda a manter a sa\u00fade e integridade do banco - Facilita rollback em caso de erro</p> <p>O Alembic \u00e9 uma ferramenta de migra\u00e7\u00e3o de banco de dados para SQLAlchemy que permite:</p> <ul> <li>Versionamento do schema do banco</li> <li>Migra\u00e7\u00f5es incrementais</li> <li>Rollback de mudan\u00e7as</li> </ul>"},{"location":"handout/main/#61-inicializando-o-alembic","title":"6.1 Inicializando o Alembic","text":"<pre><code>alembic init alembic\n</code></pre>"},{"location":"handout/main/#62-configurando-o-alembic","title":"6.2 Configurando o Alembic","text":"<p>Edite o arquivo <code>alembic/env.py</code> para conectar com nossos modelos:</p> alembic/env.py<pre><code>from logging.config import fileConfig\n\nfrom sqlalchemy import engine_from_config\nfrom sqlalchemy import pool\n\nfrom alembic import context\n\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\n\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\nfrom app.database.database import Base\n# Import all models to ensure they are registered with the Base metadata\nfrom app.models import AuthorModel, BookModel, author_book_association\ntarget_metadata = Base.metadata\n\n# ... resto do arquivo permanece igual\n</code></pre>"},{"location":"handout/main/#63-configurando-a-url-do-banco","title":"6.3 Configurando a URL do Banco","text":"<p>Edite <code>alembic.ini</code> para usar a URL do arquivo <code>.env</code>:</p> alembic.ini<pre><code># Comentar a linha sqlalchemy.url e adicionar:\n# sqlalchemy.url = driver://user:pass@localhost/dbname\nsqlalchemy.url = sqlite:///./biblioteca.db\n</code></pre>"},{"location":"handout/main/#64-criando-a-primeira-migracao","title":"6.4 Criando a Primeira Migra\u00e7\u00e3o","text":"<pre><code>alembic revision --autogenerate -m \"Create authors, books and association tables\"\n</code></pre> <pre><code>alembic upgrade head\n</code></pre> <p>Banco Criado!</p> <p>As tabelas <code>authors</code>, <code>books</code> e <code>author_book_association</code> foram criadas no banco de dados.</p>"},{"location":"handout/main/#parte-7-exemplos-praticos","title":"Parte 7: Exemplos Pr\u00e1ticos","text":"<p>Agora vamos criar exemplos pr\u00e1ticos para testar nossa implementa\u00e7\u00e3o.</p>"},{"location":"handout/main/#71-exemplo-basico-de-crud","title":"7.1 Exemplo B\u00e1sico de CRUD","text":"<p>Crie <code>examples/basic_example.py</code>:</p> app/basic_example.py<pre><code>from database.database import SessionLocal, Base, engine\nfrom models.author_model import AuthorModel\nfrom models.book_model import BookModel\nfrom repositories.author_repository import AuthorRepository\nfrom repositories.book_repository import BookRepository\n\ndef main():\n    # Criar uma sess\u00e3o\n    session = SessionLocal()\n\n    try:\n        # Instanciar reposit\u00f3rios\n        author_repo = AuthorRepository(session)\n        book_repo = BookRepository(session)\n        author_book_association = Base.metadata.tables.get(\"author_book_association\")\n\n        # Apagar dados existentes para o exemplo\n        session.query(AuthorModel).delete()\n        session.query(BookModel).delete()\n        session.query(author_book_association).delete()\n\n        # Criar um autor\n        author = AuthorModel(\n            name=\"Machado de Assis\",\n            email=\"machado@email.com\"\n        )\n        author = author_repo.add(author)\n        print(f\"Autor criado: {author}\")\n\n        # Criar um livro\n        book = BookModel(\n            title=\"Dom Casmurro\",\n            isbn=\"978-8525406958\"\n        )\n        book = book_repo.add(book)\n        print(f\"Livro criado: {book}\")\n\n        # Associar autor ao livro\n        book.authors.append(author)\n        session.commit()\n\n        # Buscar autor por email\n        found_author = author_repo.get_by_email(\"machado@email.com\")\n        print(f\"Autor encontrado: {found_author}\")\n        print(f\"Livros do autor: {[book.title for book in found_author.books]}\")\n\n        # Buscar livro por t\u00edtulo\n        found_books = book_repo.get_by_title(\"Dom\")\n        print(f\"Livros encontrados: {[book.title for book in found_books]}\")\n\n    finally:\n        session.close()\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"handout/main/#72-pratica-4-exemplo-de-uso-avancado","title":"7.2 Pr\u00e1tica 4: Exemplo de Uso Avan\u00e7ado","text":"<p>Crie um exemplo em <code>app/advanced_example.py</code> que:</p> <ol> <li>Cria m\u00faltiplos autores e livros</li> <li>Estabelece relacionamentos many-to-many</li> <li>Demonstra buscas complexas</li> <li>Mostra opera\u00e7\u00f5es de update e delete</li> </ol> Solu\u00e7\u00e3o app/advanced_example.py<pre><code>from database.database import SessionLocal, Base, engine\nfrom models.author_model import AuthorModel\nfrom models.book_model import BookModel\nfrom repositories.author_repository import AuthorRepository\nfrom repositories.book_repository import BookRepository\nfrom entities.author import Author\nfrom entities.book import Book\n\ndef main():\n    session = SessionLocal()\n\n    try:\n        author_repo = AuthorRepository(session)\n        book_repo = BookRepository(session)\n        author_book_association = Base.metadata.tables.get(\"author_book_association\")\n\n        # Limpar dados existentes para o exemplo\n        session.query(AuthorModel).delete()\n        session.query(BookModel).delete()\n        session.query(author_book_association).delete()\n        session.commit()\n\n        # Criar autores usando entidades para valida\u00e7\u00e3o\n        authors_data = [\n            {\"name\": \"Clarice Lispector\", \"email\": \"clarice@email.com\"},\n            {\"name\": \"Jorge Amado\", \"email\": \"jorge@email.com\"},\n            {\"name\": \"Paulo Coelho\", \"email\": \"paulo@email.com\"}\n        ]\n\n        authors = []\n        for data in authors_data:\n            # Usar entidade para valida\u00e7\u00e3o\n            author_entity = Author(**data)\n            # Converter para modelo\n            author_model = AuthorModel(name=author_entity.name, email=author_entity.email)\n            author = author_repo.add(author_model)\n            authors.append(author)\n            print(f\"Autor criado: {author.name}\")\n\n        # Criar livros usando entidades para valida\u00e7\u00e3o\n        books_data = [\n            {\"title\": \"A Hora da Estrela\", \"isbn\": \"978-8520925829\"},\n            {\"title\": \"Gabriela, Cravo e Canela\", \"isbn\": \"978-8535902976\"},\n            {\"title\": \"O Alquimista\", \"isbn\": \"978-8595081413\"},\n            {\"title\": \"\u00c1gua Viva\", \"isbn\": \"978-8520925836\"}\n        ]\n\n        books = []\n        for data in books_data:\n            # Usar entidade para valida\u00e7\u00e3o\n            book_entity = Book(**data)\n            # Converter para modelo\n            book_model = BookModel(title=book_entity.title, isbn=book_entity.isbn)\n            book = book_repo.add(book_model)\n            books.append(book)\n            print(f\"Livro criado: {book.title}\")\n\n        # Estabelecer relacionamentos\n        # Clarice Lispector - A Hora da Estrela e \u00c1gua Viva\n        books[0].authors.append(authors[0])  # A Hora da Estrela\n        books[3].authors.append(authors[0])  # \u00c1gua Viva\n\n        # Jorge Amado - Gabriela, Cravo e Canela\n        books[1].authors.append(authors[1])\n\n        # Paulo Coelho - O Alquimista\n        books[2].authors.append(authors[2])\n\n        session.commit()\n\n        # Demonstrar buscas\n        print(\"\\n=== BUSCAS ===\")\n\n        # Autores com livros\n        authors_with_books = author_repo.get_authors_with_books()\n        print(f\"Autores com livros: {len(authors_with_books)}\")\n\n        # Busca por nome parcial\n        clarice_authors = author_repo.get_by_name(\"Clarice\")\n        print(f\"Autores com 'Clarice': {[a.name for a in clarice_authors]}\")\n\n        # Livros de um autor espec\u00edfico\n        clarice = author_repo.get_by_email(\"clarice@email.com\")\n        print(f\"Livros da Clarice: {[book.title for book in clarice.books]}\")\n\n        # Update - Alterar email de um autor usando entidade para valida\u00e7\u00e3o\n        paulo = author_repo.get_by_email(\"paulo@email.com\")\n        # Validar com entidade\n        updated_entity = Author(name=paulo.name, email=\"paulo.coelho@email.com\")\n        paulo.email = updated_entity.email\n        updated_paulo = author_repo.update(paulo)\n        print(f\"Email atualizado: {updated_paulo.email}\")\n\n        # Delete - Remover um livro\n        book_to_delete = book_repo.get_by_isbn(\"978-8520925836\")\n        if book_to_delete:\n            book_repo.delete(book_to_delete.id)\n            print(f\"Livro '{book_to_delete.title}' removido\")\n\n    finally:\n        session.close()\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"handout/main/#73-executando-os-exemplos","title":"7.3 Executando os Exemplos","text":"<pre><code># Executar exemplo b\u00e1sico\npython app/basic_example.py\n\n# Executar exemplo avan\u00e7ado\npython app/advanced_example.py\n</code></pre>"},{"location":"handout/main/#parte-8-principios-solid-aplicados","title":"Parte 8: Princ\u00edpios SOLID Aplicados","text":"<p>Vamos analisar como nosso projeto aplicou os princ\u00edpios SOLID:</p>"},{"location":"handout/main/#81-single-responsibility-principle-srp","title":"8.1 Single Responsibility Principle (SRP)","text":"<p>Cada classe tem uma \u00fanica responsabilidade:</p> <ul> <li>Entities: Representam conceitos de dom\u00ednio</li> <li>Models: Mapeamento ORM</li> <li>Repositories: Acesso a dados</li> </ul>"},{"location":"handout/main/#82-openclosed-principle-ocp","title":"8.2 Open/Closed Principle (OCP)","text":"<p>O <code>BaseRepository</code> est\u00e1 aberto para extens\u00e3o e fechado para modifica\u00e7\u00e3o:</p> <pre><code># Extens\u00e3o sem modificar a classe base\nclass AuthorRepository(BaseRepository[AuthorModel]):\n    def get_by_email(self, email: str):\n        # M\u00e9todo espec\u00edfico para Author\n        pass\n</code></pre>"},{"location":"handout/main/#83-liskov-substitution-principle-lsp","title":"8.3 Liskov Substitution Principle (LSP)","text":"<p>Qualquer <code>Repository</code> pode ser substitu\u00eddo por sua classe base:</p> <pre><code>def process_repository(repo: BaseRepository):\n    # Funciona com qualquer implementa\u00e7\u00e3o de BaseRepository\n    entities = repo.get_all()\n    return entities\n</code></pre>"},{"location":"handout/main/#84-interface-segregation-principle-isp","title":"8.4 Interface Segregation Principle (ISP)","text":"<p>Cada repository exp\u00f5e apenas os m\u00e9todos relevantes para sua entidade.</p>"},{"location":"handout/main/#85-dependency-inversion-principle-dip","title":"8.5 Dependency Inversion Principle (DIP)","text":"<p>Os repositories dependem de abstra\u00e7\u00f5es (Session) e n\u00e3o de implementa\u00e7\u00f5es concretas.</p>"},{"location":"handout/main/#parte-9-proximos-passos-e-integracao-com-apis","title":"Parte 9: Pr\u00f3ximos Passos e Integra\u00e7\u00e3o com APIs","text":""},{"location":"handout/main/#91-preparacao-para-apis","title":"9.1 Prepara\u00e7\u00e3o para APIs","text":"<p>Nossa arquitetura est\u00e1 pronta para integra\u00e7\u00e3o com FastAPI:</p> Exemplo de integra\u00e7\u00e3o futura em app/main.py<pre><code>from fastapi import FastAPI, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom database.database import SessionLocal\nfrom repositories.author_repository import AuthorRepository\nfrom entities.author import Author\n\napp = FastAPI()\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n@app.post(\"/authors/\", response_model=Author)\ndef create_author(author: Author, db: Session = Depends(get_db)):\n    repo = AuthorRepository(db)\n    # L\u00f3gica de cria\u00e7\u00e3o\n    # ...\n    return created_author\n</code></pre>"},{"location":"handout/main/#92-melhorias-futuras","title":"9.2 Melhorias Futuras","text":"<ul> <li>Valida\u00e7\u00f5es de neg\u00f3cio nas entities</li> <li>Use Cases para l\u00f3gica complexa</li> <li>DTOs para separar entradas/sa\u00eddas da API</li> <li>Logging e monitoramento</li> </ul>"},{"location":"handout/main/#resumo","title":"Resumo","text":"<p>Neste handout, os conte\u00fados que passados foram:</p> <p>\u2705 Configurar um projeto SQLAlchemy com arquitetura limpa \u2705 Criar entidades de dom\u00ednio com Pydantic \u2705 Implementar modelos ORM com relacionamentos \u2705 Aplicar o padr\u00e3o Repository para acesso a dados \u2705 Gerenciar migra\u00e7\u00f5es com Alembic \u2705 Aplicar princ\u00edpios SOLID na pr\u00e1tica \u2705 Preparar a base para futuras APIs REST  </p>"},{"location":"handout/main/#conceitos-chave","title":"Conceitos-Chave","text":"Conceito Descri\u00e7\u00e3o ORM Mapeamento objeto-relacional Entities Representa\u00e7\u00e3o do dom\u00ednio de neg\u00f3cio Models Mapeamento para tabelas do banco Repository Abstra\u00e7\u00e3o de acesso a dados Clean Architecture Separa\u00e7\u00e3o de responsabilidades Migrations Versionamento do schema"},{"location":"handout/main/#limpeza-e-organizacao-do-projeto","title":"Limpeza e Organiza\u00e7\u00e3o do Projeto","text":""},{"location":"handout/main/#estrutura-final-limpa","title":"Estrutura Final Limpa","text":"<pre><code>sqlalchemy-lesson/\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 database/\n\u2502   \u2502   \u251c\u2500\u2500 database.py    \u2705\n\u2502   \u2502   \u2514\u2500\u2500 __init__.py    \u2705 (\u00fatil para imports)\n\u2502   \u251c\u2500\u2500 entities/\n\u2502   \u2502   \u251c\u2500\u2500 author.py      \u2705\n\u2502   \u2502   \u2514\u2500\u2500 book.py        \u2705\n\u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u251c\u2500\u2500 author_model.py \u2705\n\u2502   \u2502   \u251c\u2500\u2500 book_model.py   \u2705\n\u2502   \u2502   \u2514\u2500\u2500 __init__.py     \u2705 (\u00fatil para imports)\n\u2502   \u2514\u2500\u2500 repositories/\n\u2502       \u251c\u2500\u2500 base_repository.py     \u2705\n\u2502       \u251c\u2500\u2500 author_repository.py   \u2705\n\u2502       \u2514\u2500\u2500 book_repository.py     \u2705\n\u251c\u2500\u2500 alembic/                      \u2705\n\u251c\u2500\u2500 .env                          \u2705\n\u251c\u2500\u2500 .env.example                  \u2705\n\u251c\u2500\u2500 requirements.txt              \u2705\n\u251c\u2500\u2500 alembic.ini                   \u2705\n\u2514\u2500\u2500 README.md                     \u2705\n</code></pre> <p>Dica de Organiza\u00e7\u00e3o</p> <p>Mantenha apenas os arquivos necess\u00e1rios. Uma estrutura limpa facilita a manuten\u00e7\u00e3o e compreens\u00e3o do projeto.</p>"},{"location":"handout/main/#desafio","title":"\ud83c\udfaf Desafio","text":"<p>Implemente um sistema de empr\u00e9stimos de livros:</p> <ol> <li>Crie uma entidade <code>Loan</code> (empr\u00e9stimo)</li> <li>Relacione com <code>Book</code> e adicione um campo <code>User</code></li> <li>Implemente <code>LoanRepository</code> com m\u00e9todos espec\u00edficos</li> <li>Crie migra\u00e7\u00e3o para a nova tabela</li> <li>Desenvolva exemplo pr\u00e1tico de uso</li> </ol>"},{"location":"handout/main/#campos-sugeridos-para-loan","title":"Campos sugeridos para Loan:","text":"<ul> <li><code>id</code>, <code>book_id</code>, <code>user_name</code>, <code>loan_date</code>, <code>return_date</code>, <code>returned</code></li> </ul> <p>Dica</p> <p>Use tudo que aprendeu: entidades Pydantic, modelos SQLAlchemy, repository pattern e migra\u00e7\u00f5es! Se baseie tamb\u00e9m no que j\u00e1 est\u00e1 feito!</p>"},{"location":"handout/main/#referencias","title":"Refer\u00eancias","text":"<ul> <li>SQLAlchemy Documentation</li> <li>Pydantic Documentation</li> <li>Alembic Documentation</li> <li>Clean Architecture by Robert C. Martin</li> <li>SOLID Principles</li> </ul>"},{"location":"thisdocumentation/main/","title":"Sobre esta Documenta\u00e7\u00e3o","text":""},{"location":"thisdocumentation/main/#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<p>Antes de come\u00e7ar, certifique-se de que voc\u00ea possui os seguintes pr\u00e9-requisitos instalados em seu sistema:</p> <ul> <li>Git: Para clonar o reposit\u00f3rio.</li> </ul>"},{"location":"thisdocumentation/main/#instalando-o-python","title":"Instalando o Python","text":"LinuxmacOSWindows <p>Instale o Python 3.8 ou superior.</p> <pre><code>sudo apt install python3 python3-venv python3-pip\npython3 --version\n</code></pre> <p>Instale o Python 3.8 ou superior.</p> <pre><code>brew install python\npython3 --version\n</code></pre> <p>Instale o Python 3.13 ou superior. Baixe o instalador do site oficial do Python (https://www.python.org/downloads/) e execute-o. Certifique-se de marcar a op\u00e7\u00e3o \"Add Python to PATH\" durante a instala\u00e7\u00e3o.</p> <pre><code>python --version\n</code></pre>"},{"location":"thisdocumentation/main/#usage","title":"Usage","text":"<p>Para utilizar o c\u00f3digo deste reposit\u00f3rio, siga as instru\u00e7\u00f5es a seguir:</p> <p>Clone ou fork este reposit\u00f3rio:</p> <pre><code>git clone &lt;URL_DO_REPOSITORIO&gt;\n</code></pre> <p>Crie um ambiente virtual do Python:</p> Linux/macOSWindows <pre><code>python3 -m venv env\n</code></pre> <pre><code>python -m venv env\n</code></pre> <p>Ative o ambiente virtual (voc\u00ea deve fazer isso sempre que for executar algum script deste reposit\u00f3rio):</p> Linux/macOSWindows <pre><code>source ./env/bin/activate\n</code></pre> <pre><code>.\\env\\Scripts\\activate\n</code></pre> <p>Instale as depend\u00eancias com:</p> Linux/macOSWindows <pre><code>python3 -m pip install -r requirements.txt --upgrade\n</code></pre> <pre><code>python -m pip install -r requirements.txt --upgrade\n</code></pre>"},{"location":"thisdocumentation/main/#deployment","title":"Deployment","text":"<p>O material utiliza o mkdocs para gerar a documenta\u00e7\u00e3o. Para visualizar a documenta\u00e7\u00e3o, execute o comando:</p> <pre><code>mkdocs serve -o\n</code></pre> <p>Para subir ao GitHub Pages, execute o comando:</p> <pre><code>mkdocs gh-deploy\n</code></pre> <p>Esse reposit\u00f3rio possui um workflow do GitHub Actions que executa o comando <code>mkdocs gh-deploy</code> sempre que houver um push na branch <code>main</code>. Assim, n\u00e3o \u00e9 necess\u00e1rio executar esse comando manualmente. Toda vez que voc\u00ea fizer um push na branch <code>main</code>, a documenta\u00e7\u00e3o ser\u00e1 atualizada automaticamente no GitHub Pages.</p> <p>Aviso 1</p> <p>Para que o github actions funcione corretamente, \u00e9 necess\u00e1rio que o reposit\u00f3rio esteja configurado para que o bot <code>github-actions[bot]</code> tenha permiss\u00e3o de escrita. Voc\u00ea pode verificar isso nas configura\u00e7\u00f5es do reposit\u00f3rio, na se\u00e7\u00e3o \"Actions\" e depois em \"General\". Certifique-se de que a op\u00e7\u00e3o \"Workflow permissions\" esteja definida como \"Read and write permissions\".</p> <p></p> <p>Aviso 2</p> <p>Depois de publicar, caso n\u00e3o consiga acessar a p\u00e1gina, verifique se o github pages est\u00e1 configurado corretamente. V\u00e1 at\u00e9 as configura\u00e7\u00f5es do reposit\u00f3rio, na se\u00e7\u00e3o \"Pages\" e verifique se a branch <code>gh-pages</code> est\u00e1 selecionada como fonte. Se n\u00e3o estiver, selecione-a e salve as altera\u00e7\u00f5es.</p> <p></p> <p>Pay Attention</p> <p>No arquivo '<code>mkdocs.yml</code>, a se\u00e7\u00e3o <code>site_url</code> deve estar configurada corretamente para o seu reposit\u00f3rio. Por exemplo, se o seu reposit\u00f3rio estiver em <code>https://github.com/usuario/repositorio</code>, a se\u00e7\u00e3o <code>site_url</code> deve ser:</p> <pre><code>site_url: https://usuario.github.io/repositorio\n</code></pre> <p>Tamb\u00e9m, certifique-se de que a se\u00e7\u00e3o <code>repo_url</code> esteja configurada corretamente para o seu reposit\u00f3rio. Por exemplo:</p> <pre><code>repo_url: https://github.com/usuario/repositorio\n</code></pre>"}]}